package main

import (
    "fmt"
    "time"
)

const (
    DTLSConversationStateNew = iota
    DTLSConversationStateVerified
    DTLSConversationStateClosed
)

const (
    ServerStateNoConnection = iota
    ServerStateNoDTLS
    ServerStateUnknown
    ServerStateVulnerable
    ServerStateNotVulnerable
)

type DTLSConversation struct {
    state uint8
    cookie []byte
    InChan, OutChan chan []byte
    timeOut time.Duration
}

func NewConnection() (*DTLSConversation) {
    c := &DTLSConversation {
        state: DTLSConversationStateNew,
        InChan: make(chan []byte, 16),
        OutChan: make(chan []byte, 16),
        timeOut: 500 * time.Millisecond,
    }

    go func() {
        for {
            select {
            case pkgin := <- c.InChan:
                fmt.Printf("%#v\n", pkgin)
                c.timeOut = 500 * time.Millisecond
                switch c.state {
                case ServerStateNoConnection:
                    // â€¦
                }
            case <-time.After(c.timeOut):
                fmt.Print("Timeout reached\n")
                c.timeOut *= 2
            }
        }
    }()

    return c
}

func main() {
    c := NewConnection()
    c.InChan <- []byte{0xff}
    time.Sleep(10 * time.Second)
}
